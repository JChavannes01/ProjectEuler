""" Project euler exercises solved with python scripts.
	Exercise source: http://projecteuler.net"""

def problem1():
	"""	If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
		The sum of these multiples is 23.
		Find the sum of all the multiples of 3 or 5 below 1000."""
	print(sum([x for x in range(1000) if x % 3 == 0 or x % 5 == 0]))


def problem2():
	"""	Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
			1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
		By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms."""
	x1, x2, sum, limit = 1, 2, 0, 4_000_000
		
	while x2 <= limit:
		if x2 % 2 == 0:
			sum += x2
			
		x1, x2 = x2, x1+x2
		
	print(sum)
			
		
def problem3():
	"""	The prime factors of 13195 are 5, 7, 13 and 29.
		What is the largest prime factor of the number 600851475143 ?"""
	largestPrime, factor, number = 2, 2, 600_851_475_143
	
	while factor <= number:
		if number % factor == 0:
			#number can be divided by this prime, new largestPrime
			largestPrime, number = factor, number // factor
		else:
			factor += 1
			
	print(largestPrime)


def problem4():
	"""	A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99.
		Find the largest palindrome made from the product of two 3-digit numbers."""
	limit, maxPalindrome, = 999, 0
	
	for factor1 in range(limit, 0, -1):
		if factor1**2 <= maxPalindrome:
			break # we can stop early since we can't get a higher number
		
		for factor2 in range(factor1, 0, -1):
			product = factor1*factor2
			if str(product) == str(product)[::-1]:
				maxPalindrome = max(maxPalindrome, product)
				break #found a palindrome, since factors descend this must be the largest
				
	print(maxPalindrome)	
	
			
if __name__ == '__main__':
	problem4()
	